(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(6),o=(n(0),n(154)),i={title:"Basic usage",description:"Basic usage guide for redux-requests - declarative AJAX requests and automatic network state management for Redux"},s={id:"introduction/basic-usage",title:"Basic usage",description:"Basic usage guide for redux-requests - declarative AJAX requests and automatic network state management for Redux",source:"@site/docs/introduction/basic-usage.md",permalink:"/docs/introduction/basic-usage",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/introduction/basic-usage.md",lastUpdatedBy:"klis87",lastUpdatedAt:1595253322,sidebar:"docs",previous:{title:"Installation",permalink:"/docs/introduction/installation"},next:{title:"Examples",permalink:"/docs/introduction/examples"}},c=[{value:"Initial setup",id:"initial-setup",children:[]},{value:"Queries",id:"queries",children:[]},{value:"Mutations",id:"mutations",children:[]},{value:"Request actions philosophy",id:"request-actions-philosophy",children:[]},{value:"What&#39;s next?",id:"whats-next",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"initial-setup"},"Initial setup"),Object(o.b)("p",null,"Before you start using ",Object(o.b)("inlineCode",{parentName:"p"},"redux-requests")," library, just add below snippet to your code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import axios from 'axios';\nimport { handleRequests } from '@redux-requests/core';\nimport { createDriver } from '@redux-requests/axios'; // or another driver\n\nconst configureStore = () => {\n  const { requestsReducer, requestsMiddleware } = handleRequests({\n    driver: createDriver(axios),\n  });\n\n  const reducers = combineReducers({\n    requests: requestsReducer,\n  });\n\n  const store = createStore(\n    reducers,\n    applyMiddleware(...requestsMiddleware),\n  );\n\n  return store;\n};\n")),Object(o.b)("p",null,"So, as you can see, all you need to do is call ",Object(o.b)("inlineCode",{parentName:"p"},"handleRequests")," function\nwith a driver of your choice and use the returned reducer and middleware\nin ",Object(o.b)("inlineCode",{parentName:"p"},"createStore"),"."),Object(o.b)("h2",{id:"queries"},"Queries"),Object(o.b)("p",null,"After initial setup is done, you will gain a power to send AJAX requests with just Redux actions!"),Object(o.b)("p",null,"For example, imagine you have and endpoint ",Object(o.b)("inlineCode",{parentName:"p"},"/books"),". With pure ",Object(o.b)("inlineCode",{parentName:"p"},"axios"),", you could\nmake a request as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"axios.get('/books').then(response => response.data);\n")),Object(o.b)("p",null,"With ",Object(o.b)("inlineCode",{parentName:"p"},"redux-requests")," all you need to do is write a Redux action and dispatch it:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const FETCH_BOOKS = 'FETCH_BOOKS';\n\nconst fetchBooks = () => ({\n  type: FETCH_BOOKS,\n  request: {\n    url: '/books',\n    // you can put here other Axios config attributes, like data, headers etc.\n  },\n});\n\n// somewhere in your application\nstore.dispatch(fetchBooks());\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"fetchBooks")," is just a Redux action with ",Object(o.b)("inlineCode",{parentName:"p"},"request")," object. This object is actually\na config object passed to a driver of your choice - in our case ",Object(o.b)("inlineCode",{parentName:"p"},"axios"),". From now\non let's call such actions as ",Object(o.b)("strong",{parentName:"p"},"request actions"),"."),Object(o.b)("p",null,"So, what will happen after such an action is dispatched? The AJAX request will be made\nand depending on the outcome, either ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_SUCCESS"),", ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_ERROR"),"\nor ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_ABORT")," action will be dispatched automatically and data, error and\nloading state will be saved in the reducer."),Object(o.b)("p",null,"To read response, you can wait until request action promise is resolved:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(fetchBooks()).then(({ data, error, isAborted, action }) => {\n  // do sth with response\n});\n")),Object(o.b)("p",null,"... or with ",Object(o.b)("inlineCode",{parentName:"p"},"await")," syntax:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { data, error, isAborted, action } = await store.dispatch(fetchBooks());\n")),Object(o.b)("p",null,"However, usually you would prefer to read this state just from Redux store.\nFor that you can use built-in selectors:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { getQuery } from '@redux-requests/core';\n\nconst { data, error, loading, pristine } = getQuery(state, { type: FETCH_BOOKS });\n")),Object(o.b)("p",null,"What is ",Object(o.b)("strong",{parentName:"p"},"query")," by the way? This is just a naming convention used by this library,\nactually borrowed from ",Object(o.b)("em",{parentName:"p"},"GraphQL"),". There are two sorts of requests - ",Object(o.b)("strong",{parentName:"p"},"queries"),"\nand ",Object(o.b)("strong",{parentName:"p"},"mutations"),". ",Object(o.b)("strong",{parentName:"p"},"Queries")," are made just to fetch data and they don't cause\nside-effects. This is in contrast to ",Object(o.b)("strong",{parentName:"p"},"mutations")," which cause side-effects, like\ndata update, user registration, email sending and so on. By default requests with\n",Object(o.b)("inlineCode",{parentName:"p"},"GET")," method are queries and others like ",Object(o.b)("inlineCode",{parentName:"p"},"POST"),", ",Object(o.b)("inlineCode",{parentName:"p"},"PUT"),", ",Object(o.b)("inlineCode",{parentName:"p"},"PATCH"),", ",Object(o.b)("inlineCode",{parentName:"p"},"DELETE")," are mutations,\nbut this also depends on drivers and can be configured."),Object(o.b)("p",null,"For people wondering, ",Object(o.b)("inlineCode",{parentName:"p"},"pristine")," is true only when there was no request made for a given type yet.\nThis flag could be useful when server could reply with ",Object(o.b)("inlineCode",{parentName:"p"},"data")," as ",Object(o.b)("inlineCode",{parentName:"p"},"null")," and you would\nneed to know whether ",Object(o.b)("inlineCode",{parentName:"p"},"data")," is really ",Object(o.b)("inlineCode",{parentName:"p"},"null")," or just because no request was made."),Object(o.b)("h2",{id:"mutations"},"Mutations"),Object(o.b)("p",null,"What about updating data? Let's say you could update a book with ",Object(o.b)("inlineCode",{parentName:"p"},"axios")," like that:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"axios.post('/books/1', { title: 'New title' });\n")),Object(o.b)("p",null,"which would update ",Object(o.b)("inlineCode",{parentName:"p"},"title")," of book with ",Object(o.b)("inlineCode",{parentName:"p"},"id: 1")," to ",Object(o.b)("inlineCode",{parentName:"p"},"new title"),"."),Object(o.b)("p",null,"Again, let's implement it as Redux action:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const UPDATE_BOOK = 'UPDATE_BOOK';\n\nconst updateBook = (id, title) => ({\n  type: UPDATE_BOOK,\n  request: {\n    url: `/books/${id}`,\n    method: 'post',\n    data: { title },\n  },\n  meta: {\n    mutations: {\n      [FETCH_BOOKS]: (data, mutationData) =>\n        data.map(book => book.id === id ? mutationData : book),\n    }\n  },\n});\n\n// somewhere in your application\nstore.dispatch(updateBook('1', 'New title'));\n")),Object(o.b)("p",null,"There are several interesting things here. First of all, notice ",Object(o.b)("inlineCode",{parentName:"p"},"post")," method,\nso this request action is actually a ",Object(o.b)("strong",{parentName:"p"},"mutation"),". Also, look at ",Object(o.b)("inlineCode",{parentName:"p"},"meta")," object.\nActually request actions can have not only ",Object(o.b)("inlineCode",{parentName:"p"},"request")," object, but also ",Object(o.b)("inlineCode",{parentName:"p"},"meta"),".\nThe convention is that ",Object(o.b)("inlineCode",{parentName:"p"},"request")," object is related to a driver, while ",Object(o.b)("inlineCode",{parentName:"p"},"meta"),"\nallows you to pass driver agnostic options, all of which will be described later.\nHere we use ",Object(o.b)("inlineCode",{parentName:"p"},"mutations"),", which in this case is used to update data of ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS")," query.\nThe first argument is ",Object(o.b)("inlineCode",{parentName:"p"},"data")," (current ",Object(o.b)("inlineCode",{parentName:"p"},"data")," of ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS")," query) and ",Object(o.b)("inlineCode",{parentName:"p"},"mutationData"),"\n(data returned from server for ",Object(o.b)("inlineCode",{parentName:"p"},"UPDATE_BOOK")," mutation)."),Object(o.b)("p",null,"And how to read responses and mutation state? Similar to queries:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(updateBook('1', 'New title')).then(({ data, error, isAborted, action }) => {\n  // do sth with response\n});\n")),Object(o.b)("p",null,"... or with ",Object(o.b)("inlineCode",{parentName:"p"},"await")," syntax:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { data, error, isAborted, action } = await store.dispatch(updateBook('1', 'New title'));\n")),Object(o.b)("p",null,"... or just by using selector:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { getMutation } from '@redux-requests/core';\n\nconst { error, loading } = getMutation(state, { type: UPDATE_BOOK });\n")),Object(o.b)("p",null,"Notice no ",Object(o.b)("inlineCode",{parentName:"p"},"data")," in ",Object(o.b)("inlineCode",{parentName:"p"},"getMutation")," - this is because mutations are made to cause\nside-effects, like data update. We don't store ",Object(o.b)("inlineCode",{parentName:"p"},"data")," in reducers for mutations,\nwe do this only for queries."),Object(o.b)("h2",{id:"request-actions-philosophy"},"Request actions philosophy"),Object(o.b)("p",null,"Notice, that usually you would do such a thing like data update with a reducer. But this library has\na different approach, it manages the whole remote state with one global reducer (",Object(o.b)("inlineCode",{parentName:"p"},"requestsReducer"),") and\nadvocates having update instructions in requests actions themselves. This has the following advantages:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"you don't need to write reducers, just actions"),Object(o.b)("li",{parentName:"ul"},"all logic related to a request is kept in one place, encapsulated in a single action"),Object(o.b)("li",{parentName:"ul"},"because there is one global reducer, remote state is standardized which allowed\nto implement many features like caching, automatic normalisation and so on"),Object(o.b)("li",{parentName:"ul"},"as a consequence of above, you also don't need to write selectors, they are provided for you")),Object(o.b)("p",null,"A theoretical disadvantage is that passing a function like update function to an action\nmakes it not serializable. But in reality this is not a problem, only reducers have to be serializable,\nactions not, for example time travel will still work."),Object(o.b)("p",null,"Of course you still could listen to request actions in your reducers, but\nit is recommended to do this only for an additional state, so you would not duplicate\nstate stored in ",Object(o.b)("inlineCode",{parentName:"p"},"requestsReducer"),", which is never a good thing."),Object(o.b)("h2",{id:"whats-next"},"What's next?"),Object(o.b)("p",null,"To get more familiar with the usage of this library, it is very important to go through\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../tutorial/1-request-aborts"}),"tutorial")," first which will help understand API of this library and its assumptions."),Object(o.b)("p",null,"Then, you could check out how to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../drivers/using-drivers"}),"use drivers")," and pick\na driver of your choice or write your own if needed."),Object(o.b)("p",null,"It is also advised to read ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../guides/actions"}),"actions")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../guides/selectors"}),"selectors"),"\nguides."),Object(o.b)("p",null,"Then, you could see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"examples"}),"examples"),", read other guides or scan the whole ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../api-reference/request-action"}),"API"),"\nto see all the available options."))}u.isMDXComponent=!0},154:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),b=a,m=d["".concat(i,".").concat(b)]||d[b]||p[b]||o;return n?r.a.createElement(m,s({ref:t},l,{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);