(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{131:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(1),o=n(6),r=(n(0),n(149)),i={title:"Actions",description:"Actions guide for redux-requests - declarative AJAX requests and automatic network state management for Redux"},s={id:"guides/actions",title:"Actions",description:"Actions guide for redux-requests - declarative AJAX requests and automatic network state management for Redux",source:"@site/docs/guides/actions.md",permalink:"/docs/guides/actions",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/guides/actions.md",lastUpdatedBy:"klis87",lastUpdatedAt:1595256404,sidebar:"docs",previous:{title:"Mock driver",permalink:"/docs/drivers/mock-driver"},next:{title:"Selectors",permalink:"/docs/guides/selectors"}},c=[{value:"Request actions",id:"request-actions",children:[]},{value:"Response actions",id:"response-actions",children:[]},{value:"Promisified dispatches",id:"promisified-dispatches",children:[]},{value:"FSA actions",id:"fsa-actions",children:[]},{value:"Action creator libraries",id:"action-creator-libraries",children:[]},{value:"Thunks",id:"thunks",children:[]},{value:"Where to dispatch request actions",id:"where-to-dispatch-request-actions",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"As you probably noticed, this library is all about writing Redux actions. You need to do some\nbasic setup in ",Object(r.b)("inlineCode",{parentName:"p"},"handleRequests"),", but then you will mostly write just actions."),Object(r.b)("h2",{id:"request-actions"},"Request actions"),Object(r.b)("p",null,"You probably remember from the tutorial how request actions look like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const deleteBook = id => ({\n  type: 'DELETE_BOOK',\n  request: {\n    url: `/books/${id}`,\n    method: 'delete'\n  },\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== id),\n    },\n  },\n});\n")),Object(r.b)("p",null,"After a request action is dispatched, AJAX request will be made and then a response\naction will be dispatched automatically. But how response action looks like actually?"),Object(r.b)("h2",{id:"response-actions"},"Response actions"),Object(r.b)("p",null,"After server delivers a response for a request action, one of three results can happen,\nin our case, either ",Object(r.b)("inlineCode",{parentName:"p"},"DELETE_BOOK_SUCCESS"),", ",Object(r.b)("inlineCode",{parentName:"p"},"DELETE_BOOK_ERROR")," or ",Object(r.b)("inlineCode",{parentName:"p"},"DELETE_BOOK_ABORT"),".\nSee below how those response actions could look like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: 'DELETE_BOOK_SUCCESS',\n  response: {\n    data: {\n      id: '1',\n      name: 'deleted book',\n    },\n  },\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n    },\n    requestAction: {\n      type: 'DELETE_BOOK',\n      request: {\n        url: '/books/1',\n        method: 'delete',\n      },\n      meta: {\n        mutations: {\n          FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n        },\n      },\n    },\n  },\n}\n\n{\n  type: 'DELETE_BOOK_ERROR',\n  error: 'a server error',\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n    },\n    requestAction: {\n      type: 'DELETE_BOOK',\n      request: {\n        url: '/books/1',\n        method: 'delete',\n      },\n      meta: {\n        mutations: {\n          FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n        },\n      },\n    },\n  },\n}\n\n{\n  type: 'DELETE_BOOK_ABORT',\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n    },\n    requestAction: {\n      type: 'DELETE_BOOK',\n      request: {\n        url: '/books/1',\n        method: 'delete',\n      },\n      meta: {\n        mutations: {\n          FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n        },\n      },\n    },\n  },\n}\n")),Object(r.b)("p",null,"As you can see, ",Object(r.b)("inlineCode",{parentName:"p"},"type")," of response actions is equal to a related request action with\na suffix (",Object(r.b)("inlineCode",{parentName:"p"},"_SUCCESS"),", ",Object(r.b)("inlineCode",{parentName:"p"},"_ERROR")," or ",Object(r.b)("inlineCode",{parentName:"p"},"_ABORT"),")."),Object(r.b)("p",null,"Also notice ",Object(r.b)("inlineCode",{parentName:"p"},"meta")," in any response action, you can find there ",Object(r.b)("inlineCode",{parentName:"p"},"requestAction")," object,\nwhich is just a related request action which resulted in the response action. Also all ",Object(r.b)("inlineCode",{parentName:"p"},"meta"),"\nkeys are copied to response actions for convenience, that's why there is ",Object(r.b)("inlineCode",{parentName:"p"},"mutations")," key there.\nYou can use this mechanism also to pass anything to ",Object(r.b)("inlineCode",{parentName:"p"},"meta"),", then it will be available in\nresponse actions too in case you need it."),Object(r.b)("p",null,"Additionally, of course success actions have ",Object(r.b)("inlineCode",{parentName:"p"},"response")," key and error actions have ",Object(r.b)("inlineCode",{parentName:"p"},"error")," key."),Object(r.b)("h2",{id:"promisified-dispatches"},"Promisified dispatches"),Object(r.b)("p",null,"By default in Redux ",Object(r.b)("inlineCode",{parentName:"p"},"store.dispatch(action)")," will just return the dispatched ",Object(r.b)("inlineCode",{parentName:"p"},"action")," itself.\nHowever, this library changes this behaviour for request actions dispatches by returning promises\nresolving with responses. Because of that, not only you can await requests to be finished, but also\nyou can read responses directly from the places you dispatched requests."),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(fetchBooks()).then(({ data, error, isAborted, action }) => {\n  // data for success, error for error, isAborted: true for abort\n})\n")),Object(r.b)("p",null,"As you can see, this promise is always resolved, never rejected. Why? To avoid unhandled promise rejection errors.\nImagine you dispatch a request action somewhere, but in this place you are not interested in result. You just do\n",Object(r.b)("inlineCode",{parentName:"p"},"store.dispatch(fetchBooks())"),". Now, even if you handle error in another place, like by reading error from state,\nin case of promise rejection the warning would be still there."),Object(r.b)("p",null,"Anyway, promise is resolved on response as:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"when ",Object(r.b)("inlineCode",{parentName:"li"},"success"),", as ",Object(r.b)("inlineCode",{parentName:"li"},"{ data, action, ...extraDriverProps }"),", ",Object(r.b)("inlineCode",{parentName:"li"},"extraDriverProps")," are other optional keys\nnext to ",Object(r.b)("inlineCode",{parentName:"li"},"data")," inside success response, for example ",Object(r.b)("inlineCode",{parentName:"li"},"axios")," and ",Object(r.b)("inlineCode",{parentName:"li"},"fetch")," drivers support ",Object(r.b)("inlineCode",{parentName:"li"},"headers")," and ",Object(r.b)("inlineCode",{parentName:"li"},"status"),",\nso promise would be resolved to ",Object(r.b)("inlineCode",{parentName:"li"},"{ data, action, headers, status }")),Object(r.b)("li",{parentName:"ul"},"when ",Object(r.b)("inlineCode",{parentName:"li"},"error"),", as ",Object(r.b)("inlineCode",{parentName:"li"},"{ error, action }")),Object(r.b)("li",{parentName:"ul"},"when ",Object(r.b)("inlineCode",{parentName:"li"},"abort"),", as ",Object(r.b)("inlineCode",{parentName:"li"},"{ isAborted: true, action }"))),Object(r.b)("p",null,"So ",Object(r.b)("inlineCode",{parentName:"p"},"action")," is always there in case you need an access to response action."),Object(r.b)("p",null,"Actually there is one case when promise is rejected - a syntax error. Imagine you make an error\nin ",Object(r.b)("inlineCode",{parentName:"p"},"getData")," or ",Object(r.b)("inlineCode",{parentName:"p"},"onSuccess")," interceptor. In those cases promise will be rejected with syntax error itself,\notherwise the error would be swallowed and you wouldn't know where a problem is."),Object(r.b)("h2",{id:"fsa-actions"},"FSA actions"),Object(r.b)("p",null,"If you happen to like writing Redux actions as ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/redux-utilities/flux-standard-action"}),"FSA actions"),",\nyou can use them for request actions too, for example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const deleteBook = id => ({\n  type: 'DELETE_BOOK',\n  payload: {\n    request: {\n      url: `/books/${id}`,\n      method: 'delete'\n    },\n  },\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== id),\n    },\n  },\n});\n")),Object(r.b)("p",null,"If you do it, response actions will have FSA structure too, for example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  type: 'DELETE_BOOK_SUCCESS',\n  payload: {\n    response: {\n      data: {\n        id: '1',\n        name: 'deleted book',\n      },\n    },\n  },\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n    },\n    requestAction: {\n      type: 'DELETE_BOOK',\n      payload: {\n        request: {\n          url: '/books/1',\n          method: 'delete',\n        },\n      },\n      meta: {\n        mutations: {\n          FETCH_BOOKS: data => data.filter(book => book.id !== '1'),\n        },\n      },\n    },\n  },\n}\n")),Object(r.b)("h2",{id:"action-creator-libraries"},"Action creator libraries"),Object(r.b)("p",null,"Because this library is just a Redux addon, it is totally compatible with action\ncreator libraries, like ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/klis87/redux-smart-actions"}),"redux-smart-actions"),",\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/redux-utilities/redux-actions"}),"redux-actions")," or\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/pauldijou/redux-act"}),"redux-act"),"."),Object(r.b)("p",null,"For example, when using ",Object(r.b)("inlineCode",{parentName:"p"},"redux-smart-actions"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createAction } from 'redux-smart-actions';\n\nconst deleteBook = createAction('DELETE_BOOK', id => ({\n  request: {\n    url: `/books/${id}`,\n    method: 'delete'\n  },\n  meta: {\n    mutations: {\n      FETCH_BOOKS: data => data.filter(book => book.id !== id),\n    },\n  },\n}));\n")),Object(r.b)("p",null,"Usage for ",Object(r.b)("inlineCode",{parentName:"p"},"redux-actions")," and ",Object(r.b)("inlineCode",{parentName:"p"},"redux-act")," would be similar. Anyway, the key here to know\nis that when using libraries like that, you don't need to write constants anymore, just actions!\nAnd, because ",Object(r.b)("inlineCode",{parentName:"p"},"deleteBook.toString() === 'DELETE_BOOK'"),", you can pass request actions themselves\ninstead of request action types in many places, for example instead of:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { getMutation } from 'redux-requests/core';\n\nconst deleteBookMutation = getMutation(state, { type: 'DELETE_BOOK' });\n")),Object(r.b)("p",null,"you could just do:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { getMutation } from 'redux-requests/core';\n\nconst deleteBookMutation = getMutation(state, { type: deleteBook });\n")),Object(r.b)("h2",{id:"thunks"},"Thunks"),Object(r.b)("p",null,"Sometimes your request actions might need to get an information from Redux store.\nOf course you can always pass it as a function argument, but some people prefer using\nthunks for this purpose, for example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const deleteBookThunk = () => (dispatch, getState) => {\n  const bookId = currentBookIdSelector(getState());\n  return dispatch(deleteBook(bookId));\n}\n")),Object(r.b)("p",null,"This approach could prove very convenient, imagine you need to dispatch ",Object(r.b)("inlineCode",{parentName:"p"},"deleteBook"),"\naction in multiple places, you would always need to read ",Object(r.b)("inlineCode",{parentName:"p"},"bookId")," in each place and pass\nit to ",Object(r.b)("inlineCode",{parentName:"p"},"deleteBook"),". With thunk you must do this only once."),Object(r.b)("p",null,"There is a problem though, if you don't like writing constants but you prefer to\nuse action creator libraries, then you would like your thunks to also contain\n",Object(r.b)("inlineCode",{parentName:"p"},"type")," as ",Object(r.b)("inlineCode",{parentName:"p"},"toString")," so that you could pass thunks to ",Object(r.b)("inlineCode",{parentName:"p"},"getMutation")," directly for example.\nFortunately, this problem is solved by the companion library ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/klis87/redux-smart-actions"}),"redux-smart-actions"),". With its help, you could implement ",Object(r.b)("inlineCode",{parentName:"p"},"deleteBook")," as:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createThunk } from 'redux-smart-actions';\n\nconst deleteBook = createThunk('DELETE_BOOK', () => (dispatch, getState) => {\n  const id = currentBookIdSelector(getState());\n\n  return {\n    request: {\n      url: `/books/${id}`,\n      method: 'delete'\n    },\n    meta: {\n      mutations: {\n        FETCH_BOOKS: data => data.filter(book => book.id !== id),\n      },\n    },\n  };\n});\n")),Object(r.b)("p",null,"Now, ",Object(r.b)("inlineCode",{parentName:"p"},"deleteBook.toString() === 'DELETE_BOOK'")," again, so you can pass it to functions\nlike ",Object(r.b)("inlineCode",{parentName:"p"},"getMutation")," and forget about constants even when writing thunks!"),Object(r.b)("h2",{id:"where-to-dispatch-request-actions"},"Where to dispatch request actions"),Object(r.b)("p",null,"This library automatically makes AJAX requests and handles all remote state, but it doesn't\ncare where you dispatch request actions from. This is totally up to you! You can\ndispatch them in sagas, in a middleware, in observables, in React components, from\nthunks or even inside routes when using Redux routers like ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/faceyspacey/redux-first-router"}),"redux-first-router"),". Basically, in any place you could dispatch a Redux action,\nyou can dispatch request actions, after all request action is also just Redux action!"))}u.isMDXComponent=!0},149:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=u(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,m=d["".concat(i,".").concat(p)]||d[p]||b[p]||r;return n?o.a.createElement(m,s({ref:t},l,{components:n})):o.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);