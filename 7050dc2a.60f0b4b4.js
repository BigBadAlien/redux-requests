(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{126:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(1),a=n(6),i=(n(0),n(154)),o={title:"GraphQL driver",description:"GraphQL guide for redux-requests - declarative AJAX requests and automatic network state management for Redux"},l={id:"drivers/graphql-driver",title:"GraphQL driver",description:"GraphQL guide for redux-requests - declarative AJAX requests and automatic network state management for Redux",source:"@site/docs/drivers/graphql-driver.md",permalink:"/docs/drivers/graphql-driver",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/drivers/graphql-driver.md",lastUpdatedBy:"Konrad",lastUpdatedAt:1606866644,sidebar:"docs",previous:{title:"Fetch driver",permalink:"/docs/drivers/fetch-driver"},next:{title:"Promise driver",permalink:"/docs/drivers/promise-driver"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Passing variables",id:"passing-variables",children:[]},{value:"Using GraphQL fragments",id:"using-graphql-fragments",children:[]},{value:"Mutations",id:"mutations",children:[]},{value:"File uploads",id:"file-uploads",children:[]},{value:"Progress event support",id:"progress-event-support",children:[]}],c={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Choose this driver, if you need to communicate with ",Object(i.b)("strong",{parentName:"p"},"GraphQL")," server. Of course, it\nis possible to do it directly with ",Object(i.b)("inlineCode",{parentName:"p"},"axios")," or ",Object(i.b)("inlineCode",{parentName:"p"},"fetch")," driver, but ",Object(i.b)("strong",{parentName:"p"},"GraphQL")," communication\nwill be much simpler with this one. Not to mention that it has some functionalities\ncompatible with Apollo server and tooling, like ",Object(i.b)("inlineCode",{parentName:"p"},"gql")," tag and ",Object(i.b)("inlineCode",{parentName:"p"},"GraphQL multipart request specification"),"\nto facilitate files uploads."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"To install the package, just run:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ npm install @redux-requests/graphql\n")),Object(i.b)("p",null,"or you can just use CDN: ",Object(i.b)("inlineCode",{parentName:"p"},"https://unpkg.com/@redux-requests/graphql"),"."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"Let's assume we have the following GraphQL schema:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"type Book {\n  id: ID!\n  title: String!\n  author: String!\n  liked: Boolean!\n}\n\ntype File {\n  filename: String!\n  mimetype: String!\n  encoding: String!\n}\n\ntype Query {\n  books: [Book!]!\n  book(id: ID!): Book\n}\n\ntype Mutation {\n  deleteBook(id: ID!): Book\n  singleUpload(file: Upload!): File!\n  multipleUpload(files: [Upload!]!): [File!]!\n}\n")),Object(i.b)("p",null,"To use this driver, just import it and pass to ",Object(i.b)("inlineCode",{parentName:"p"},"handleRequests"),", like you would do\nwith other drivers:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { handleRequests } from '@redux-requests/core';\nimport { createDriver } from '@redux-requests/graphql';\n\nhandleRequests({\n  driver: createDriver({ url: 'http://localhost:3000/graphql' }),\n});\n")),Object(i.b)("p",null,"In order to send a query, just do it in a similar fashion to other drivers. The only\none thing really specific to GraphQL is a way you define your actions. Let's create an action\nto fetch books:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { gql } from '@redux-requests/graphql';\n\nconst fetchBooks = () => ({\n  type: 'FETCH_BOOKS',\n  request: {\n    query: gql`\n      {\n        books {\n          id\n          title\n          author\n          liked\n        }\n      }\n    `,\n    headers: {\n      SOMEHEADER: 'SOMEHEADER',\n    },\n  },\n});\n")),Object(i.b)("p",null,"As you see, there is nothing fancy here, you just write GraphQL. Notice we wrap it in\n",Object(i.b)("inlineCode",{parentName:"p"},"gql")," tag. Currently it only trims queries, but in the future it could do other stuff,\nso it is recommended to wrap all your queries in ",Object(i.b)("inlineCode",{parentName:"p"},"gql"),", especially that it will hint\nmost of code editors to properly highlight them. Also notice that it is possible to\npass ",Object(i.b)("inlineCode",{parentName:"p"},"headers"),", which could be useful for authentication for instance."),Object(i.b)("h2",{id:"passing-variables"},"Passing variables"),Object(i.b)("p",null,"Now, let's fetch a specific book, which requires using variables:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const fetchBook = id => ({\n  type: 'FETCH_BOOK',\n  request: {\n    query: gql`\n      query($id: ID!) {\n        book(id: $id) {\n          id\n          title\n          author\n          liked\n        }\n      }\n    `,\n    variables: { id },\n  },\n});\n")),Object(i.b)("h2",{id:"using-graphql-fragments"},"Using GraphQL fragments"),Object(i.b)("p",null,"Notice ",Object(i.b)("inlineCode",{parentName:"p"},"Book")," properties repeated across those two queries. As you probably know,\nthe answer for this problem is GraphQL fragment, which you can create like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const bookFragment = gql`\n  fragment BookFragment on Book {\n    id\n    title\n    author\n    liked\n  }\n`;\n\nconst fetchBook = id => ({\n  type: 'FETCH_BOOK',\n  request: {\n    query: gql`\n      query($id: ID!) {\n        book(id: $id) {\n          ...BookFragment\n        }\n      }\n      ${bookFragment}\n    `,\n    variables: { id },\n  },\n});\n")),Object(i.b)("h2",{id:"mutations"},"Mutations"),Object(i.b)("p",null,"Mutations are done like queries, just use GraphQL language:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const deleteBook = id => ({\n  type: 'DELETE_BOOK',\n  request: {\n    query: gql`\n      mutation($id: ID!) {\n        deleteBook(id: $id) {\n          id\n        }\n      }\n    `,\n    variables: { id },\n  },\n});\n")),Object(i.b)("h2",{id:"file-uploads"},"File uploads"),Object(i.b)("p",null,"Upload files according to ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/jaydenseric/graphql-multipart-request-spec"}),"GraphQL multipart request specification"),", which is also used by other\nGraphQL clients and servers, like Apollo, is also supported."),Object(i.b)("p",null,"So, to upload a single file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const uploadFile = file => ({\n  type: 'UPLOAD_FILE',\n  request: {\n    query: gql`\n      mutation($file: Upload!) {\n        singleUpload(file: $file) {\n          filename\n          mimetype\n          encoding\n        }\n      }\n    `,\n    variables: { file },\n  },\n});\n")),Object(i.b)("p",null,"... or, to upload multiple files:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const uploadFiles = files => ({\n  type: 'UPLOAD_FILES',\n  request: {\n    query: gql`\n      mutation($files: [Upload!]!) {\n        multipleUpload(files: $files) {\n          filename\n          mimetype\n          encoding\n        }\n      }\n    `,\n    variables: { files },\n  },\n});\n")),Object(i.b)("p",null,"So, you can do it exactly in the same way like other libraries supporting\n",Object(i.b)("inlineCode",{parentName:"p"},"GraphQL multipart request specification"),"."),Object(i.b)("h2",{id:"progress-event-support"},"Progress event support"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"graphql")," driver supports ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent"}),"ProgressEvent"),". All you\nneed to do is to add ",Object(i.b)("inlineCode",{parentName:"p"},"meta.measureDownloadProgress")," or ",Object(i.b)("inlineCode",{parentName:"p"},"meta.measureUploadProgress")," to a request action and\nyou could access ",Object(i.b)("inlineCode",{parentName:"p"},"downloadProgress")," or ",Object(i.b)("inlineCode",{parentName:"p"},"uploadProgress")," values from selectors like ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery")," or ",Object(i.b)("inlineCode",{parentName:"p"},"getMutation"),"."))}p.isMDXComponent=!0},154:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||i;return n?a.a.createElement(m,l({ref:t},c,{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);