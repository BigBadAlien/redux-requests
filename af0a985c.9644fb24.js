(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{141:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(1),r=n(6),o=(n(0),n(158)),s={title:"1. Requests aborts",description:"1st part of the tutorial for redux-requests - declarative AJAX requests and automatic network state management for single-page applications"},i={id:"tutorial/1-requests-aborts",title:"1. Requests aborts",description:"1st part of the tutorial for redux-requests - declarative AJAX requests and automatic network state management for single-page applications",source:"@site/docs/tutorial/1-requests-aborts.md",permalink:"/docs/tutorial/1-requests-aborts",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/tutorial/1-requests-aborts.md",lastUpdatedBy:"Konrad",lastUpdatedAt:1610499904,sidebar:"docs",previous:{title:"Examples",permalink:"/docs/introduction/examples"},next:{title:"2. Batch requests",permalink:"/docs/tutorial/2-batch-requests"}},c=[{value:"Basic setup",id:"basic-setup",children:[]},{value:"Importance of requests aborts",id:"importance-of-requests-aborts",children:[]},{value:"Requests aborts configuration",id:"requests-aborts-configuration",children:[]},{value:"<code>abortRequests</code>",id:"abortrequests",children:[]},{value:"<code>resetRequests</code>",id:"resetrequests",children:[]}],u={rightToc:c};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"basic-setup"},"Basic setup"),Object(o.b)("p",null,"Before we begin, make sure you read ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../introduction/basic-usage"}),"basic usage chapter"),". Now, let's start with\na basic setup:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import axios from 'axios';\nimport { handleRequests } from '@redux-requests/core';\nimport { createDriver } from '@redux-requests/axios';\n\nconst configureStore = () => {\n  const { requestsReducer, requestsMiddleware } = handleRequests({\n    driver: createDriver(axios),\n  });\n\n  const reducers = combineReducers({\n    requests: requestsReducer,\n  });\n\n  const store = createStore(reducers, applyMiddleware(...requestsMiddleware));\n\n  return store;\n};\n")),Object(o.b)("p",null,"Now, imagine we need to fetch books which are paginated on the server. We start\nwith writing a request action:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const FETCH_BOOKS = 'FETCH_BOOKS';\n\nconst fetchBooks = page => ({\n  type: FETCH_BOOKS,\n  request: {\n    url: '/books',\n    params: { page },\n  },\n});\n")),Object(o.b)("p",null,"We pass ",Object(o.b)("inlineCode",{parentName:"p"},"page")," param to ",Object(o.b)("inlineCode",{parentName:"p"},"fetchBooks")," action, because as described earlier, books\nare paginated on the backend side."),Object(o.b)("p",null,"Once we have the action ready, let's download the 1st page of books:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(fetchBooks(1));\n")),Object(o.b)("p",null,"What will happen then? ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS")," action will be dispatched,\nthen AJAX request will be made and depending on the outcome, either ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_SUCCESS"),"\nor ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_ERROR")," action will be dispatched with the server response."),Object(o.b)("p",null,"But there is yet another possibility, imagine that we dispatch ",Object(o.b)("inlineCode",{parentName:"p"},"fetchBooks")," whenever\na user wants to see a page. There is an interesting case, when the user is faster\nthan our network. Let's simulate this behaviour:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(fetchBooks(1));\nstore.dispatch(fetchBooks(2));\n")),Object(o.b)("p",null,"In above situation, we ask for page ",Object(o.b)("inlineCode",{parentName:"p"},"2")," while request for page ",Object(o.b)("inlineCode",{parentName:"p"},"1")," is still pending.\nNow, what will actually happen is the following dispatch sequence:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH_BOOKS")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH_BOOKS")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH_BOOKS_ABORT")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH_BOOKS_SUCCESS"))),Object(o.b)("p",null,"What is ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS_ABORT"),"? As you probably know, AJAX requests can be possibly aborted.\nSometimes you might want to cancel a pending request because its response is not needed anymore.\nAborting is a good thing then because it releases resources. But often aborting requests\nis even more important because it prevents many race conditions bugs before they even happen!"),Object(o.b)("h2",{id:"importance-of-requests-aborts"},"Importance of requests aborts"),Object(o.b)("p",null,"In real life, you cannot predict how long a request will take. If you fetch 1st page of\nbooks, then quickly 2nd one, it could easily happen that response for the 1st page could\nbe received after 2nd, despite the fact request order was different! So without being cautious\nhere, user could see books from page 1 being on 2nd page!"),Object(o.b)("p",null,"So, going back, ",Object(o.b)("inlineCode",{parentName:"p"},"redux-requests")," has first class support for requests aborts. By default,\nif a query of a given type is pending and a new one is fired, the previous request will be\nautomatically aborted."),Object(o.b)("h2",{id:"requests-aborts-configuration"},"Requests aborts configuration"),Object(o.b)("p",null,"By default only queries are aborted this way, mutations are not. You can easily change\nthose defaults by a special ",Object(o.b)("inlineCode",{parentName:"p"},"takeLatest")," option, which can be passed either to ",Object(o.b)("inlineCode",{parentName:"p"},"handleRequests"),"\nfor global configuration or in request action ",Object(o.b)("inlineCode",{parentName:"p"},"meta"),"."),Object(o.b)("p",null,"If for a some reason you would like to prevent aborts for ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS"),", you could\ndo it like that:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const fetchBooks = page => ({\n  type: FETCH_BOOKS,\n  request: {\n    url: '/books',\n    params: { page },\n  },\n  meta: {\n    takeLatest: false,\n  },\n});\n")),Object(o.b)("p",null,"Or... if you had a mutation which you would like to have aborted, you would add\n",Object(o.b)("inlineCode",{parentName:"p"},"meta.takeLatest: true"),"."),Object(o.b)("p",null,"As mentioned above, you can configure it globally by using ",Object(o.b)("inlineCode",{parentName:"p"},"takeLatest")," option\nin ",Object(o.b)("inlineCode",{parentName:"p"},"handleRequest"),". Default implementation uses aborts only for\nqueries and it looks like that:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { isRequestActionQuery } from '@redux-requests/core';\n\nconst takeLatest = action => isRequestActionQuery(action);\n// or just shorter\n// const takeLatest = isRequestActionQuery;\n")),Object(o.b)("h2",{id:"abortrequests"},Object(o.b)("inlineCode",{parentName:"h2"},"abortRequests")),Object(o.b)("p",null,"Sometimes you might need to abort some pending requests manually.\nYou can use ",Object(o.b)("inlineCode",{parentName:"p"},"abortRequests")," action to do it, for example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { abortRequests } from '@redux-requests/core';\n\n// abort everything\ndispatch(abortRequests());\n\n// abort FETCH_BOOKS\ndispatch(abortRequests([FETCH_BOOKS]));\n\n// abort FETCH_BOOKS and FETCH_BOOK with 1 request key\n// you will learn about requestKey in another tutorial\ndispatch(\n  abortRequests([FETCH_BOOKS, { requestType: FETCH_BOOK, requestKey: '1' }]),\n);\n")),Object(o.b)("h2",{id:"resetrequests"},Object(o.b)("inlineCode",{parentName:"h2"},"resetRequests")),Object(o.b)("p",null,"It is also possible to abort requests with ",Object(o.b)("inlineCode",{parentName:"p"},"resetRequests")," action, but this will be covered\nin another tutorial."))}l.isMDXComponent=!0},158:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),l=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},b=function(e){var t=l(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=l(n),d=a,O=b["".concat(s,".").concat(d)]||b[d]||p[d]||o;return n?r.a.createElement(O,i({ref:t},u,{components:n})):r.a.createElement(O,i({ref:t},u))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);