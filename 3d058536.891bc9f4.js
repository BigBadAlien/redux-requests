(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var r=n(1),a=n(6),i=(n(0),n(150)),o={title:"Usage with React",description:"React guide for redux-requests - declarative AJAX requests and automatic network state management for Redux"},l={id:"guides/usage-with-react",title:"Usage with React",description:"React guide for redux-requests - declarative AJAX requests and automatic network state management for Redux",source:"@site/docs/guides/usage-with-react.md",permalink:"/docs/guides/usage-with-react",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/guides/usage-with-react.md",lastUpdatedBy:"klis87",lastUpdatedAt:1595261005,sidebar:"docs",previous:{title:"Usage with redux-saga",permalink:"/docs/guides/usage-with-redux-saga"},next:{title:"RequestAction",permalink:"/docs/api-reference/request-action"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"<code>useQuery</code>",id:"usequery",children:[]},{value:"<code>Query</code>",id:"query",children:[]},{value:"<code>useMutation</code>",id:"usemutation",children:[]},{value:"<code>Mutation</code>",id:"mutation",children:[]}]}],u={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"This library is just a Redux addon, so you can use it with any UI library, like React,\nAngular, Vue - whatever will work with Redux will work. However, you might consider using\nsome React helpers which will be described below."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"To install the package, just run:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ npm install @redux-requests/react\n")),Object(i.b)("p",null,"or you can just use CDN: ",Object(i.b)("inlineCode",{parentName:"p"},"https://unpkg.com/@redux-requests/react"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bas"}),"$ npm install react-redux\n")),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("h3",{id:"usequery"},Object(i.b)("inlineCode",{parentName:"h3"},"useQuery")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"useQuery")," is a hook which uses ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector")," from ",Object(i.b)("inlineCode",{parentName:"p"},"react-redux")," together with ",Object(i.b)("inlineCode",{parentName:"p"},"getQuerySelector")," from\n",Object(i.b)("inlineCode",{parentName:"p"},"redux-requests/core"),". It accepts the same arguments as ",Object(i.b)("inlineCode",{parentName:"p"},"getQuerySelector"),". You could\neasily use ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector")," directly, but ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery")," is slightly less verbose. So, without ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport { getQuerySelector } from '@redux-requests/core';\nimport { useSelector } from 'react-redux';\n\nconst Books = () => {\n  const books = useSelector(getQuerySelector({ type: 'FETCH_BOOKS' }))\n  // ...\n};\n")),Object(i.b)("p",null,"and with ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport { useQuery } from '@redux-requests/react';\n\nconst Books = () => {\n  const books = useQuery({ type: 'FETCH_BOOKS' })\n  // ...\n};\n")),Object(i.b)("h3",{id:"query"},Object(i.b)("inlineCode",{parentName:"h3"},"Query")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Query")," simplifies rendering queries data, loading spinners and server errors. It automatically connects to Redux store by using ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery")," under the hood. It has the following props:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type: string"),": type of query action, refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getQuery")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"requestKey: string"),": pass it if you used ",Object(i.b)("inlineCode",{parentName:"li"},"requestKey")," in query action, refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getQuery")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"multiple: boolean"),": refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getQuery")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"defaultData"),": refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getQuery")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"selector"),": if you already have a query selector, pass it here instead of ",Object(i.b)("inlineCode",{parentName:"li"},"type")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"children")," - render function receiving object with data, loading flag and error property"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"component")," - alternative prop to children, you can pass your custom component here, which will receive data,  loading and error props, plus any additional props passed to ",Object(i.b)("inlineCode",{parentName:"li"},"Query")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isDataEmpty: query => boolean"),": function which defines when ",Object(i.b)("inlineCode",{parentName:"li"},"data")," is empty, by default data as empty array and falsy value like ",Object(i.b)("inlineCode",{parentName:"li"},"null"),", ",Object(i.b)("inlineCode",{parentName:"li"},"undefined")," is considered as empty\nwhen data is updated - it will still show during initial fetch, but ill not for subsequent requests"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"noDataMessage"),": ",Object(i.b)("inlineCode",{parentName:"li"},"string")," or any React node, like ",Object(i.b)("inlineCode",{parentName:"li"},"<div>message</div>"),", which will be rendered when ",Object(i.b)("inlineCode",{parentName:"li"},"data")," is empty"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"errorComponent"),": custom React component, which will be rendered on error, receives ",Object(i.b)("inlineCode",{parentName:"li"},"error")," prop, ",Object(i.b)("inlineCode",{parentName:"li"},"null")," by default"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"errorComponentProps"),": extra props which will be passed to ",Object(i.b)("inlineCode",{parentName:"li"},"errorComponent")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"loadingComponent")," custom React component, which will be rndered when request is pending, useful for showing"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"loadingComponentProps"),": extra props which will be passed to ",Object(i.b)("inlineCode",{parentName:"li"},"loadingComponent"),"\nspinners, ",Object(i.b)("inlineCode",{parentName:"li"},"null")," by default"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"showLoaderDuringRefetch: boolean"),": ",Object(i.b)("inlineCode",{parentName:"li"},"true")," by default, whether ",Object(i.b)("inlineCode",{parentName:"li"},"loadingComponent")," will be shown on data refetch\nor not, if ",Object(i.b)("inlineCode",{parentName:"li"},"false")," you won't see spinner even when data is being loaded if you already have some data from a previous requests")),Object(i.b)("p",null,"Minimalistic example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { Query } from '@redux-requests/react';\n\n<Query\n  type={REQUEST_TYPE}\n  // or selector={myQuerySelector}\n>\n  {({ data }) => (\n    <div>\n      {data}\n    </div>\n  )}\n</Query>\n")),Object(i.b)("p",null,"or with ",Object(i.b)("inlineCode",{parentName:"p"},"component")," prop:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { Query } from '@redux-requests/react';\n\nconst DataComponent = ({ query, extraLabelProp }) => (\n  <div>\n    <h1>{extraLabelProp}</h1>\n    {query.data}\n  </div>\n);\n\n<Query\n  type={REQUEST_TYPE}\n  // or selector={myQuerySelector}\n  component={DataComponent}\n  extraLabelProp=\"label\"\n/>\n")),Object(i.b)("p",null,"or with all props:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { Query } from '@redux-requests/react';\n\nconst LoadingComponent = ({ label }) => (\n  <div>\n    ...loading\n    {label}\n  </div>\n);\n\nconst ErrorComponent = ({ error, label }) => (\n  <div>\n    Error with status code {error.status}\n    {label}\n  </div>\n);\n\n<Query\n  type={REQUEST_TYPE}\n  // or selector={myQuerySelector}\n  isDataEmpty={query =>\n    Array.isArray(query.data) ? query.data.length === 0 : !query.data}\n  showLoaderDuringRefetch={false}\n  noDataMessage=\"There is no data\"\n  errorComponent={ErrorComponent}\n  errorComponentProps={{ label: 'Error label' }}\n  loadingComponent={LoadingComponent}\n  loadingComponentProps={{ label: 'Loading label' }}\n>\n  {({ data }) => (\n    <div>\n      {data}\n    </div>\n  )}\n</Query>\n")),Object(i.b)("h3",{id:"usemutation"},Object(i.b)("inlineCode",{parentName:"h3"},"useMutation")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"useMutation")," is a hook which uses ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector")," from ",Object(i.b)("inlineCode",{parentName:"p"},"react-redux")," together with ",Object(i.b)("inlineCode",{parentName:"p"},"getMutationSelector")," from\n",Object(i.b)("inlineCode",{parentName:"p"},"redux-requests"),". It accepts the same arguments as ",Object(i.b)("inlineCode",{parentName:"p"},"getMutationSelector"),". Like in case of ",Object(i.b)("inlineCode",{parentName:"p"},"useQuery"),", you could\nrender"),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import React from 'react';\nimport { useMutation } from '@redux-requests/react';\n\nconst Books = () => {\n  const { loading, error } = useMutation({ type: 'DELETE_BOOK' })\n  // ...\n};\n")),Object(i.b)("h3",{id:"mutation"},Object(i.b)("inlineCode",{parentName:"h3"},"Mutation")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Mutation")," converts ",Object(i.b)("inlineCode",{parentName:"p"},"useMutation")," into component with render prop. It has the following props:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type: string"),": type of mutation action, refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getMutation")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"requestKey: string"),": pass it if you used ",Object(i.b)("inlineCode",{parentName:"li"},"requestKey")," in mutation action, refer to ",Object(i.b)("inlineCode",{parentName:"li"},"getMutation")," from the core library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"selector"),": if you already have a mutation selector, pass it here instead of type"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"children")," - render function receiving object with loading flag and error property"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"component")," - alternative prop to children, you can pass your custom component here, which will receive loading and error props, plus any additional props passed to Mutation")),Object(i.b)("p",null,"You use it like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { Mutation } from '@redux-requests/react';\n\n<Mutation\n  type={MUTATION_TYPE}\n  // or selector={myMutationSelector}\n>\n  {({ loading, error }) => {\n    if (error) {\n      return <div>Something went wrong</div>;\n    }\n\n    return (\n      <button onClick={dispatchSomeMutation} disabled={loading}>\n        Send mutation {loading && '...' }\n      </button>\n    );\n  }}\n</Mutation>\n")))}b.isMDXComponent=!0},150:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),b=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=b(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=r,m=p["".concat(o,".").concat(d)]||p[d]||s[d]||i;return n?a.a.createElement(m,l({ref:t},u,{components:n})):a.a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);