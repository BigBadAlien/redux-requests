(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{130:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(1),o=r(6),a=(r(0),r(157)),i={title:"Promise driver",description:"Working with promises guide for redux-requests - declarative AJAX requests and automatic network state management for single-page applications"},s={id:"drivers/promise-driver",title:"Promise driver",description:"Working with promises guide for redux-requests - declarative AJAX requests and automatic network state management for single-page applications",source:"@site/docs/drivers/promise-driver.md",permalink:"/docs/drivers/promise-driver",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/drivers/promise-driver.md",lastUpdatedBy:"Konrad",lastUpdatedAt:1610499904,sidebar:"docs",previous:{title:"GraphQL driver",permalink:"/docs/drivers/graphql-driver"},next:{title:"Mock driver",permalink:"/docs/drivers/mock-driver"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]}],c={rightToc:l};function p(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"introduction"},"Introduction"),Object(a.b)("p",null,"This driver is useful when you want to work directly with promises. For instance,\nyou could already have a ready to use library implementing communication with an API."),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"To install the package, just run:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install @redux-requests/promise\n")),Object(a.b)("p",null,"or you can just use CDN: ",Object(a.b)("inlineCode",{parentName:"p"},"https://unpkg.com/@redux-requests/promise"),"."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"As for any driver, you must pass it to ",Object(a.b)("inlineCode",{parentName:"p"},"handleRequests"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { createDriver } from '@redux-requests/promise';\n\nhandleRequests({\n  driver: createDriver({\n    AbortController: window.AbortController,\n    processResponse: response => ({ data: response }),\n  }),\n});\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"AbortController")," is optional, by default it will use ",Object(a.b)("inlineCode",{parentName:"p"},"AbortController")," if available,\nwith fallback to ",Object(a.b)("inlineCode",{parentName:"p"},"DummyAbortController")," which does nothing. If your environment doesn't\nsupport ",Object(a.b)("inlineCode",{parentName:"p"},"AbortController"),", you could pass a ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/mo/abortcontroller-polyfill"}),"polyfill"),".\nIf you don't, requests abort won't work."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"processResponse")," is also optional, the default is ",Object(a.b)("inlineCode",{parentName:"p"},"response => ({ data: response })"),",\nit is useful if your promises resolve to more things than ",Object(a.b)("inlineCode",{parentName:"p"},"data"),", then you could for instance use\n",Object(a.b)("inlineCode",{parentName:"p"},"response => ({ data: response.data })")),Object(a.b)("p",null,"Once you have done that, you can use promises in request actions:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const fetchPhoto = id => ({\n  type: FETCH_PHOTO,\n  request: {\n    promise: axios.get(`https://jsonplaceholder.typicode.com/photos/${id}`),\n  },\n});\n")),Object(a.b)("p",null,"Also note, that for mutations you need to pass ",Object(a.b)("inlineCode",{parentName:"p"},"meta.asMutation: true")," in your request actions,\nso the core library could know whether a request is a query or a mutation. For many drivers\nlike ",Object(a.b)("inlineCode",{parentName:"p"},"axios"),", ",Object(a.b)("inlineCode",{parentName:"p"},"fetch")," and ",Object(a.b)("inlineCode",{parentName:"p"},"graphql")," it is not usually necessary as the library can deduct\nwhether something is a query or a mutation by looking at request config, like ",Object(a.b)("inlineCode",{parentName:"p"},"GET")," request method\nwill be typically a query while ",Object(a.b)("inlineCode",{parentName:"p"},"POST")," a mutation."))}p.isMDXComponent=!0},157:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s({},t,{},e)),r},u=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),b=n,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return r?o.a.createElement(m,s({ref:t},c,{components:r})):o.a.createElement(m,s({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);