(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(1),o=n(6),i=(n(0),n(149)),a={title:"Selectors"},l={id:"guides/selectors",title:"Selectors",description:"While it is possible to get a remote state from `requestsReducer` on your own, it is recommented to use below selectors.",source:"@site/docs/guides/selectors.md",permalink:"/redux-requests/docs/guides/selectors",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/guides/selectors.md",lastUpdatedBy:"klis87",lastUpdatedAt:1593953995,sidebar:"docs",previous:{title:"Actions",permalink:"/redux-requests/docs/guides/actions"},next:{title:"Server side rendering",permalink:"/redux-requests/docs/guides/server-side-rendering"}},c=[{value:"<code>getQuery</code>",id:"getquery",children:[]},{value:"<code>getQuerySelector</code>",id:"getqueryselector",children:[]},{value:"<code>getMutation</code>",id:"getmutation",children:[]},{value:"<code>getMutationSelector</code>",id:"getmutationselector",children:[]}],s={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"While it is possible to get a remote state from ",Object(i.b)("inlineCode",{parentName:"p"},"requestsReducer")," on your own, it is recommented to use below selectors.\nFor one thing, they are already optimized, reusing cache and clearing it when necessary. Another reason is\nthat they return only information needed by applications, while state kept in ",Object(i.b)("inlineCode",{parentName:"p"},"requestsReducer")," contains\nmore data required by the library itself. Not to mention a situation when you use automatic normalisation.\nData in reducer is kept normalized, while you need it denormalized in your apps. Selectors already know how to denormalize it automatically and quickly, so that you don't even need to worry about it."),Object(i.b)("h2",{id:"getquery"},Object(i.b)("inlineCode",{parentName:"h2"},"getQuery")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"getQuery")," is a selector which returns a state for a given query. It is the selector which requires props.\nImagine you want to get a state for ",Object(i.b)("inlineCode",{parentName:"p"},"FETCH_BOOKS")," query which we played with earlier. You can use it like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { getQuery } from '@redux-requests/core';\n\nconst booksQuery = getQuery(state, { type: 'FETCH_BOOKS' });\n/* for example {\n  data: [{ id: '1', name: 'Some book title' }],\n  loading: false,\n  error: null,\n  pristine: false, // true only when there was no request made for a give type\n} */\n")),Object(i.b)("p",null,"If you are an experienced Redux developer, you might be worried about memoization of ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery"),".\nFear not! You can call it with different props and memoization is not lost, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const booksQuery = getQuery(state, { type: 'FETCH_BOOKS' });\ngetQuery(state, { type: 'FETCH_STH_ELSE' });\nbooksQuery === getQuery(state, { type: 'FETCH_BOOKS' })\n// returns true (unless state for FETCH_BOOKS query really changed in the meantime)\n")),Object(i.b)("p",null,"We only provided example for ",Object(i.b)("inlineCode",{parentName:"p"},"type")," prop, but here you have the list of all possibilities:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type: string"),": just pass query action type or action itself when using action creator library"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"requestKey: string"),": use it if you used ",Object(i.b)("inlineCode",{parentName:"li"},"meta.requestKey")," in query action"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"multiple"),": set to ",Object(i.b)("inlineCode",{parentName:"li"},"true")," if you prefer ",Object(i.b)("inlineCode",{parentName:"li"},"data")," to be ",Object(i.b)("inlineCode",{parentName:"li"},"[]")," instead of ",Object(i.b)("inlineCode",{parentName:"li"},"null")," if data is empty, ",Object(i.b)("inlineCode",{parentName:"li"},"false")," by default"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"defaultData"),": use it to represent ",Object(i.b)("inlineCode",{parentName:"li"},"data")," as an orbitrary object instead of ",Object(i.b)("inlineCode",{parentName:"li"},"null"),", use top level object though,\nnot recreate it multiple times not to break selector memoization")),Object(i.b)("h2",{id:"getqueryselector"},Object(i.b)("inlineCode",{parentName:"h2"},"getQuerySelector")),Object(i.b)("p",null,"It is almost the same as ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery"),", the difference is that ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery")," is the selector,\nwhile ",Object(i.b)("inlineCode",{parentName:"p"},"getQuerySelector")," is the selector creator - it just returns ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery"),"."),Object(i.b)("p",null,"It is helpful when you need to provide a selector without props somewhere (like in ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector")," React hook).\nSo instead of doing ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector(state => getQuery(state, { type: 'FETCH_BOOKS' }))"),"\nyou could just ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector(getQuerySelector({ type: 'FETCH_BOOKS' }))"),"."),Object(i.b)("h2",{id:"getmutation"},Object(i.b)("inlineCode",{parentName:"h2"},"getMutation")),Object(i.b)("p",null,"Almost the same as ",Object(i.b)("inlineCode",{parentName:"p"},"getQuery"),", it is just used for mutations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { getMutation } from '@redux-requests/core';\n\nconst deleteBookMutation = getMutation(state, { type: 'DELETE_BOOK' });\n/* for example {\n  loading: false,\n  error: null,\n} */\n")),Object(i.b)("p",null,"It accept ",Object(i.b)("inlineCode",{parentName:"p"},"type")," and optionally ",Object(i.b)("inlineCode",{parentName:"p"},"requestKey")," props, which work like for queries."),Object(i.b)("h2",{id:"getmutationselector"},Object(i.b)("inlineCode",{parentName:"h2"},"getMutationSelector")),Object(i.b)("p",null,"Like ",Object(i.b)("inlineCode",{parentName:"p"},"getQuerySelector"),", it just returns ",Object(i.b)("inlineCode",{parentName:"p"},"getMutation")," selector."))}u.isMDXComponent=!0},149:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(a,".").concat(d)]||p[d]||b[d]||i;return n?o.a.createElement(m,l({ref:t},s,{components:n})):o.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);