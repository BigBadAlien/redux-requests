(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{154:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return b}));var n=r(0),a=r.n(n);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=a.a.createContext({}),p=function(e){var t=a.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i({},t,{},e)),r},l=function(e){var t=p(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(r),f=n,b=l["".concat(o,".").concat(f)]||l[f]||d[f]||s;return r?a.a.createElement(b,i({ref:t},u,{components:r})):a.a.createElement(b,i({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var u=2;u<s;u++)o[u]=r[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},98:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(1),a=r(6),s=(r(0),r(154)),o={title:"resetRequests",description:"resetRequests API reference for redux-requests - declarative AJAX requests and automatic network state management for Redux"},i={id:"api-reference/reset-requests",title:"resetRequests",description:"resetRequests API reference for redux-requests - declarative AJAX requests and automatic network state management for Redux",source:"@site/docs/api-reference/reset-requests.md",permalink:"/docs/api-reference/reset-requests",editUrl:"https://github.com/klis87/redux-requests/edit/master/docusaurus/docs/api-reference/reset-requests.md",lastUpdatedBy:"klis87",lastUpdatedAt:1595253322,sidebar:"docs",previous:{title:"getMutationSelector",permalink:"/docs/api-reference/get-mutation-selector"},next:{title:"abortRequests",permalink:"/docs/api-reference/abort-requests"}},c=[],u={rightToc:c};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"resetRequests")," is a built-in action to reset requests state.\nSometimes you might need to clear data and errors of your requests, including both queries and mutations.\nYou can use ",Object(s.b)("inlineCode",{parentName:"p"},"resetRequests")," action to do it. For example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import { resetRequests } from '@redux-requests/core';\n\n// clear everything\ndispatch(resetRequests());\n\n// clear errors and data for FETCH_BOOKS query\ndispatch(resetRequests([FETCH_BOOKS]));\n\n// clear errors if any for for DELETE_BOOKS mutation\ndispatch(resetRequests([DELETE_BOOKS]));\n\n// clear errors and data for FETCH_BOOKS and FETCH_BOOK with 1 request key\ndispatch(resetRequests([FETCH_BOOKS, { requestType: FETCH_BOOK, requestKey: '1' }]));\n")),Object(s.b)("p",null,"What is important, ",Object(s.b)("inlineCode",{parentName:"p"},"resetRequests")," apart from reset also aborts all pending requests of the given types.\nYou can prevent it by passing 2nd argument ",Object(s.b)("inlineCode",{parentName:"p"},"dispatch(resetRequests([FETCH_BOOKS], false))")),Object(s.b)("p",null,"Also note that ",Object(s.b)("inlineCode",{parentName:"p"},"resetRequests")," also sets query ",Object(s.b)("inlineCode",{parentName:"p"},"pristine")," to ",Object(s.b)("inlineCode",{parentName:"p"},"true")," and clears cache if set."))}p.isMDXComponent=!0}}]);